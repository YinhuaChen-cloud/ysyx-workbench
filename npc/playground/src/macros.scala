package Macros

import chisel3._
import chisel3.util._
import chisel3.experimental.ChiselEnum

object macros {
  val func_len = 8
}

object RV64ExuOp extends ChiselEnum {
  val Addi, Auipc, Jal, Jalr, Sd, Ebreak, InvalidExuOp = Value
}

object RV64Inst {
  def ADDI(inst: UInt) = (BitPat("b???????_?????_?????_000_?????_0010011") === inst) 
  def AUIPC(inst: UInt) = (BitPat("b?????????????????????????0010111") === inst)
  def JAL(inst: UInt) = (BitPat("b?????????????????????????1101111") === inst)
  def JALR(inst: UInt) = (BitPat("b?????????????????000?????1100111") === inst)
  def SD(inst: UInt) = (BitPat("b?????????????????011?????0100011") === inst)
  def EBREAK(inst: UInt) = (BitPat("b00000000000100000000000001110011") === inst)
}
